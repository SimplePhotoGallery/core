---
import { DEFAULT_STATIC_ASSETS_PATH } from '@/config';

import type { GalleryMetadata } from '@/features/themes/base-theme/types/gallery';

interface Props {
  title: string;
  metadata?: GalleryMetadata;
}

const { title, metadata } = Astro.props;
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>

  <base href="/" />

  {/* Basic SEO */}
  {metadata?.keywords && <meta name="keywords" content={metadata.keywords} />}
  {metadata?.author && <meta name="author" content={metadata.author} />}
  {metadata?.canonicalUrl && <link rel="canonical" href={metadata.canonicalUrl} />}
  {metadata?.robots && <meta name="robots" content={metadata.robots} />}
  {metadata?.language && <meta name="language" content={metadata.language} />}

  {/* Favicon */}
  <link rel="icon" type="image/x-icon" href="/favicon.ico" />

  {/* Open Graph / Facebook */}
  {metadata?.ogType && <meta property="og:type" content={metadata.ogType} />}
  {metadata?.ogUrl && <meta property="og:url" content={metadata.ogUrl} />}
  <meta property="og:title" content={title} />
  {metadata?.description && <meta property="og:description" content={metadata.description} />}
  {metadata?.ogImage && <meta property="og:image" content={metadata.ogImage} />}
  {metadata?.ogImageWidth && <meta property="og:image:width" content={metadata.ogImageWidth.toString()} />}
  {metadata?.ogImageHeight && <meta property="og:image:height" content={metadata.ogImageHeight.toString()} />}
  {metadata?.ogSiteName && <meta property="og:site_name" content={metadata.ogSiteName} />}

  {/* Twitter */}
  {metadata?.twitterCard && <meta name="twitter:card" content={metadata.twitterCard} />}
  {metadata?.twitterSite && <meta name="twitter:site" content={metadata.twitterSite} />}
  {metadata?.twitterCreator && <meta name="twitter:creator" content={metadata.twitterCreator} />}
  <meta name="twitter:title" content={title} />
  {metadata?.description && <meta name="twitter:description" content={metadata.description} />}
  {metadata?.ogImage && <meta name="twitter:image" content={metadata.ogImage} />}

  <script is:inline>
    (function () {
      let base = document.querySelector('base');
      if (!base) {
        base = document.createElement('base');
        document.head.prepend(base);
      }
    
      // Decide whether the current path ends in “directory” vs “file”.
      const p          = location.pathname;
      const looksFile  = /\.[a-z0-9]+$/i.test(p.split('/').pop() || '');
    
      // If it’s “directory without slash”, stick a slash on and update <base>.
      base.href = (!p.endsWith('/') && !looksFile) ? p + '/' : './';
    })();
  </script>

  <link rel="icon" href={`${DEFAULT_STATIC_ASSETS_PATH}/favicon.ico`} sizes="32x32" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
    rel="stylesheet"
  />

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@5.3.8/dist/photoswipe.css" />
</head>
