---
import type { GalleryMetadata } from '@simple-photo-gallery/common/src/gallery';

interface Props {
  title: string;
  description?: string;
  url?: string;
  thumbsBaseUrl?: string;
  metadata?: GalleryMetadata;
  headerImageBasename?: string;
}

const { title, description, url, thumbsBaseUrl, metadata, headerImageBasename } = Astro.props;

// Use headerImageBasename for dynamic image paths, fallback to generic name
const imgBasename = headerImageBasename || 'header';

// Get the base path for the thumbnails
const thumbnailBasePath = thumbsBaseUrl || 'gallery/images';
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>

  <base href="/" />

  {/* Basic SEO */}
  <meta name="description" content={description} />
  {metadata?.keywords && <meta name="keywords" content={metadata.keywords} />}
  {metadata?.author && <meta name="author" content={metadata.author} />}
  {metadata?.canonicalUrl || (url && <link rel="canonical" href={metadata?.canonicalUrl || url} />)}
  {metadata?.robots && <meta name="robots" content={metadata.robots} />}
  {metadata?.language && <meta name="language" content={metadata.language} />}

  {/* Open Graph / Facebook */}
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  {metadata?.image && <meta property="og:image" content={metadata.image} />}
  <meta property="og:image:width" content={String(metadata?.imageWidth) || '1200'} />
  <meta property="og:image:height" content={String(metadata?.imageHeight) || '631'} />
  {metadata?.ogType && <meta property="og:type" content={metadata.ogType} />}
  {metadata?.ogUrl || (url && <meta property="og:url" content={metadata?.ogUrl || url} />)}
  {metadata?.ogSiteName && <meta property="og:site_name" content={metadata.ogSiteName} />}

  {/* Twitter */}
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  {metadata?.image && <meta name="twitter:image" content={metadata.image} />}
  <meta name="twitter:image:width" content={String(metadata?.imageWidth) || '1200'} />
  <meta name="twitter:image:height" content={String(metadata?.imageHeight) || '631'} />
  {metadata?.twitterSite && <meta name="twitter:site" content={metadata.twitterSite} />}
  {metadata?.twitterCreator && <meta name="twitter:creator" content={metadata.twitterCreator} />}

  <script is:inline>
    (function () {
      let base = document.querySelector('base');
      if (!base) {
        base = document.createElement('base');
        document.head.prepend(base);
      }

      // Decide whether the current path ends in “directory” vs “file”.
      const p = location.pathname;
      const looksFile = /\.[a-z0-9]+$/i.test(p.split('/').pop() || '');

      // If it’s “directory without slash”, stick a slash on and update <base>.
      base.href = !p.endsWith('/') && !looksFile ? p + '/' : './';
    })();
  </script>

  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
    rel="stylesheet"
  />
  <link
    rel="preload"
    as="image"
    type="image/avif"
    media="(max-aspect-ratio: 3/4)"
    imagesrcset={`${thumbnailBasePath}/${imgBasename}_portrait_360.avif 360w, ${thumbnailBasePath}/${imgBasename}_portrait_480.avif 480w, ${thumbnailBasePath}/${imgBasename}_portrait_720.avif 720w, ${thumbnailBasePath}/${imgBasename}_portrait_1080.avif 1080w`}
    imagesizes="(max-aspect-ratio: 3/4) 160vw, 100vw"
    fetchpriority="high"
  />
  <link
    rel="preload"
    as="image"
    type="image/avif"
    media="(min-aspect-ratio: 3/4)"
    imagesrcset={`${thumbnailBasePath}/${imgBasename}_landscape_640.avif 640w, ${thumbnailBasePath}/${imgBasename}_landscape_960.avif 960w, ${thumbnailBasePath}/${imgBasename}_landscape_1280.avif 1280w, ${thumbnailBasePath}/${imgBasename}_landscape_1920.avif 1920w, ${thumbnailBasePath}/${imgBasename}_landscape_2560.avif 2560w, ${thumbnailBasePath}/${imgBasename}_landscape_3840.avif 3840w`}
    imagesizes="100vw"
    fetchpriority="high"
  />
</head>
