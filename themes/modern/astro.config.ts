import fs from 'node:fs';
import path from 'node:path';

import { defineConfig } from 'astro/config';
import relativeLinks from 'astro-relative-links';

import type { AstroIntegration } from 'astro';

// Dynamically import gallery.json from source path or fallback to local
const sourceGalleryPath = process.env.GALLERY_JSON_PATH;
if (!sourceGalleryPath) throw new Error('GALLERY_JSON_PATH environment variable is not set');

const outputDir = process.env.GALLERY_OUTPUT_DIR || sourceGalleryPath.replace('gallery.json', '');

/**
 * Astro integration to prevent empty content collection files from being generated
 * These files (content-assets.mjs and content-modules.mjs) are generated by Astro
 * even when content collections aren't used, and they're empty in this case.
 */
function preventEmptyContentFiles(): AstroIntegration {
  return {
    name: 'prevent-empty-content-files',
    hooks: {
      'astro:build:done': ({ dir }) => {
        // Remove empty content collection files after build completes
        const filesToRemove = ['content-assets.mjs', 'content-modules.mjs'];
        for (const fileName of filesToRemove) {
          const filePath = path.join(dir.pathname, fileName);
          if (fs.existsSync(filePath)) {
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              // Only remove if the file is essentially empty (just exports an empty Map)
              if (content.trim() === 'export default new Map();' || content.trim() === '') {
                fs.unlinkSync(filePath);
              }
            } catch {
              // Silently ignore errors (file might not exist or be accessible)
            }
          }
        }
      },
    },
  };
}

// https://astro.build/config
export default defineConfig({
  output: 'static',
  outDir: outputDir + '/_build',
  build: {
    assets: 'assets',
    assetsPrefix: 'gallery',
  },
  integrations: [relativeLinks(), preventEmptyContentFiles()],
  publicDir: 'public',
  vite: {
    define: {
      'process.env.GALLERY_JSON_PATH': JSON.stringify(sourceGalleryPath),
    },
    build: {
      // Merge all CSS into a single file instead of code-splitting
      cssCodeSplit: false,
      // Rollup options to minimize output files
      rollupOptions: {
        output: {
          // Consolidate JS chunks to minimize files
          manualChunks: undefined,
        },
      },
    },
  },
});
