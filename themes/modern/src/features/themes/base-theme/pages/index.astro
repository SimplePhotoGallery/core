---
import fs from 'node:fs';

import Footer from '@/features/themes/base-theme/components/footer/Footer.astro';
import GallerySection from '@/features/themes/base-theme/components/gallery-section/GallerySection.astro';
import Hero from '@/features/themes/base-theme/components/hero/Hero.astro';
import PhotoSwipe from '@/features/themes/base-theme/components/lightbox/PhotoSwipe.astro';
import SubGalleries from '@/features/themes/base-theme/components/sub-galleries/SubGalleries.astro';
import MainLayout from '@/features/themes/base-theme/layouts/MainLayout.astro';

import type { GalleryData } from '@simple-photo-gallery/common/src/gallery';

// Dynamically import gallery.json from source path or fallback to local
const galleryJsonPath = process.env.GALLERY_JSON_PATH || './gallery.json';
const galleryData = JSON.parse(fs.readFileSync(galleryJsonPath, 'utf8'));

const gallery = galleryData as GalleryData;

const { title, description, metadata, sections, subGalleries, mediaBaseUrl, url, analyticsScript, headerImage, headerImageBlurHash } = gallery;
---

<script>
  import { decode } from 'blurhash';

  const blurHashCanvases = document.querySelectorAll<HTMLCanvasElement>('canvas[data-blur-hash]');

  for (const canvas of blurHashCanvases) {
    const blurHashValue = canvas.dataset.blurHash;

    if (blurHashValue) {
      const pixels = decode(blurHashValue, 32, 32);
      const ctx = canvas.getContext('2d');

      if (pixels && ctx) {
        const imageData = new ImageData(new Uint8ClampedArray(pixels), 32, 32);
        ctx.putImageData(imageData, 0, 0);
      }
    }
  }
</script>

<MainLayout title={title} description={description} metadata={metadata} url={url} analyticsScript={analyticsScript} headerImage={headerImage}>
  <Hero title={title} description={description} headerImage={headerImage} headerImageBlurHash={headerImageBlurHash} />

  {
    subGalleries && subGalleries.galleries.length > 0 && (
      <SubGalleries title={subGalleries.title} subGalleries={subGalleries.galleries} />
    )
  }
  {
    sections.map((section, sectionIndex) => (
      <GallerySection section={section} sectionIndex={sectionIndex} mediaBaseUrl={mediaBaseUrl} />
    ))
  }

  <Footer />
  <PhotoSwipe />
</MainLayout>
